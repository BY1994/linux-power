{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Linux Power Management Guide Document Power Management \uac00 \uc911\uc694\ud55c \uc774\uc720? \ub9ce\uc740 \uc81c\ud488\ub4e4\uc774 \uc720\uc120 \uc804\uc6d0 \uacf5\uae09 \uc7a5\uce58\uac00 \uc544\ub2cc \ubc30\ud130\ub9ac\ub85c \uc804\uc6d0\uc774 \uacf5\uae09\ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c \ubc30\ud130\ub9ac\uc5d0 \uc800\uc7a5\ub41c \uc5d0\ub108\uc9c0\ub97c \ud6a8\uc728\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc911\uc694\ud569\ub2c8\ub2e4. (\ubc30\ud130\ub9ac \uc5d0\ub108\uc9c0\ub97c \ud6a8\uc728\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560\uc218\ub85d \ubc30\ud130\ub9ac \ucda9\uc804\ub2f9 \uc81c\ud488\uc758 \uc0ac\uc6a9 \uac00\ub2a5 \uc2dc\uac04\uc774 \uc99d\uac00\ud569\ub2c8\ub2e4) \uc804\uccb4 \uc804\ub825 \uc18c\ubaa8 \uc591\uc740 \ud06c\uac8c \ub3d9\uc801\uc778 \uc804\ub825 (Dynamic Power, Switching Power) \uacfc \uc815\uc801\uc778 \uc804\ub825 (Static Power, Leakage Power) \uc744 \ud569\ud55c \uac12\uc73c\ub85c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc815\uc801\uc778 \uc804\ub825\uc740 \uc544\ubb34 \ud65c\ub3d9\uc774 \uc5c6\ub294 \uc0c1\ud0dc\uc77c \ub54c\ub3c4 \uacc4\uc18d\ud574\uc11c \uc77c\uc815\ud558\uac8c \uc18c\ubaa8\ub418\ub294 \uc804\ub825\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \ubc18\uba74, \ub3d9\uc801\uc778 \uc804\ub825\uc740 \ud65c\ub3d9\uc774 \uc788\uc74c\uc73c\ub85c\uc368 \uc0dd\uaca8\ub098\ub294 \uc804\ub825 \uc18c\ubaa8\uc785\ub2c8\ub2e4.[^1] \uc544\ub798 \uadf8\ub798\ud504\ub97c \ubcf4\uba74 \uc5b8\uc81c\ub098 \uc18c\ubaa8\ub418\uace0 \uc788\ub294 \ucd5c\uc18c\ud55c\uc758 \uc591\uc774 \ubcf4\uc785\ub2c8\ub2e4. \uc774\uac83\uc774 Leakage Power \uc785\ub2c8\ub2e4. \uadf8 \uc704\uc5d0 Dyanmic Power \uac00 \ucd94\uac00\ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc5d0\ub108\uc9c0\ub97c \ud6a8\uc728\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c \ubc29\ubc95 (Power savings) \ub3c4 \ub450 \uac00\uc9c0\ub85c \ub098\ub220\ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.[^2] \uccab\ubc88\uc9f8\ub294 \uc815\uc801 \uc804\uc6d0 \uad00\ub9ac (Static Power Management) \ub85c \uc81c\ud488\uc774 \ube44\ud65c\uc131\ud654 (inactive) \uc0c1\ud0dc\uc77c \ub54c\ub098 \uc0ac\uc6a9\uc790\uac00 \uc2a4\uc704\uce58 \uc785\ub825 \ub4f1\uc73c\ub85c \uc120\ud0dd\ud55c \uacbd\uc6b0 \uc800\uc804\ub825 \uc2dc\uc2a4\ud15c \uc0c1\ud0dc (Low-power system states) \ub85c \uc804\ud658\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \ud639\uc740 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc788\ub294 \ubd80\ubd84\uc758 \uc804\uc6d0\ub9cc \ucc28\ub2e8\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ub450\ubc88\uc9f8\ub294 \ub3d9\uc801 \uc804\uc6d0 \uad00\ub9ac (Dynamic Power Management) \ub85c \uc81c\ud488\uc774 \uc0ac\uc6a9 \uc911\uc77c \ub54c \uc804\uc6d0\uc744 \uad00\ub9ac\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uc804\uc6d0 \uad00\ub9ac\uc5d0\ub294 CPU \uc8fc\ud30c\uc218 & \uc804\uc555 \uc870\uc815\uc774\ub098 \uc8fc\ubcc0 \uc7a5\uce58\uc758 \ud074\ub7ed \ubc0f \uc804\uc6d0 \uc81c\uc5b4 \ub4f1\uc774 \ud3ec\ud568\ub429\ub2c8\ub2e4. Static Power Management \uc815\uc801 \uc804\uc6d0 \uad00\ub9ac\ub294 \uc77c\ubd80 \ub610\ub294 \ubaa8\ub4e0 \uc2dc\uc2a4\ud15c \uad6c\uc131 \uc694\uc18c\uc758 \uc804\uc6d0\uc744 \uaebc\uc11c \uc800\uc804\ub825 \uc2dc\uc2a4\ud15c \uc0c1\ud0dc\ub85c \uc9c4\uc785\uc2dc\ud0b5\ub2c8\ub2e4. Linux \uc5d0\uc11c\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uc800\uc804\ub825 \uc2dc\uc2a4\ud15c \uc0c1\ud0dc (Low-power system states) \ud639\uc740 \uc2dc\uc2a4\ud15c \uc808\uc804 \uc0c1\ud0dc (System Sleep States) \ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4. [^3] Suspend-to-Idle Stanby Suspend-to-RAM Hibernation \ub610\ub294 Linux \uc5d0\uc11c \uc9c0\uc6d0\ud558\ub294 Runtime Power Management Framework \ub97c \uc0ac\uc6a9\ud558\uba74 \uc804\uc6d0\uc744 \uc81c\uc5b4\ud558\uace0 \uc2f6\uc740 \uc77c\ubd80 \uc601\uc5ed\uc774\ub098 \ub514\ubc14\uc774\uc2a4\uc758 \uc804\uc6d0\uc744 \uc644\uc804\ud788 \ub044\uac70\ub098 \ucf24 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7f0 \uc77c\ubd80\uac00 \uc544\ub2c8\ub77c \uc804\uccb4 \uc2dc\uc2a4\ud15c\uc758 \uc804\uc6d0\uc744 \uad00\ub9ac\ud558\ub824\uba74 \uc704\uc5d0\uc11c \uc18c\uac1c\ud55c Suspend To RAM \ub4f1\uc758 \uae30\ub2a5\uc744 \uc774\uc6a9\ud574\uc57c\ud569\ub2c8\ub2e4. Dynamic Power Management \uc815\uc801\uc73c\ub85c \uc804\ub825 \uad00\ub9ac\ub97c \uc704\ud574\uc11c\ub294 \uc804\uc555\uc774\ub098 \ud074\ub77d \uc8fc\ud30c\uc218\ub97c \ub0ae\ucd94\ub294 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud639\uc740 \uc628\ub3c4 \uc13c\uc11c\ub97c \ud1b5\ud574 \ud604\uc7ac CPU \uc758 \uc628\ub3c4\ub97c \ud655\uc778\ud558\uc5ec \uc2dc\uc2a4\ud15c\uc744 \ubcf4\ud638\ud558\uae30 \uc704\ud574 \uc804\uc555\uc774\ub098 \ud074\ub77d \uc8fc\ud30c\uc218\ub97c \ub0ae\ucda5\ub2c8\ub2e4. \uc804\uc555\uc774\ub098 \ud074\ub77d \uc8fc\ud30c\uc218\ub97c \ub0ae\ucdb0\uc11c \uc804\ub825 \uc18c\ube44\ub97c \uc904\uc774\uac8c \ub418\uba74 \uc628\ub3c4\uac00 \uac10\uc18c\ud569\ub2c8\ub2e4. CPU frequency Scaling (Dynamic Voltage and Frequency Scaling; DVFS) Dynamic Thermal Management \uc544\ub798\ub294 \uc804\uccb4 \ubcf4\ub4dc \uc704\uc758 CPU \uc758 \uc704\uce58 \ubc0f CPU \uadfc\ucc98\uc758 \uc628\ub3c4 \uc13c\uc11c\uac00 \uc704\uce58\ud55c \uc608\uc2dc\uc785\ub2c8\ub2e4. Linux Power Framework Linux \uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \uc804\ub825 \uad00\ub9ac\ub97c \uc704\ud55c Framework \ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. \uc774\ub97c Static Power \uc640 Dynamic Power \ub85c \ubd84\ub9ac\ud574\uc11c \ubcf4\uba74 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4. \uc815\uc801 \uc804\uc6d0 \uad00\ub9ac\uc5d0 \ud574\ub2f9\ud558\ub294 Linux Framework \ubc0f Driver\ub97c \ubcf4\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. Suspend To RAM \uc2dc\uc2a4\ud15c\uc774 \ucf1c\uc838\uc788\uc744 \ub54c \uc77c\uc815\ud558\uac8c \uc18c\ube44\ub418\ub294 \uc804\ub825\uc744 \uc904\uc774\uae30 \uc704\ud574\uc11c\ub294 \uc804\uccb4 \uc2dc\uc2a4\ud15c\uc744 \uc808\uc804 \uc0c1\ud0dc (Suspend To RAM) \ub85c \ubcc0\uacbd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Runtime PM \uc804\uccb4 \uc2dc\uc2a4\ud15c\uc774 \uc544\ub2cc \uc77c\ubd80 \ub514\ubc14\uc774\uc2a4 \ub4f1\uc758 \uc804\uc6d0\uc744 \ucf1c\uac70\ub098 \ub044\ub3c4\ub85d \uad00\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. CPUidle CPU \uac00 \ud560 \uc77c\uc774 \uc5c6\uc744 \ub54c\ub294 \uc5d0\ub108\uc9c0 \uc808\uc57d\uc744 \uc704\ud558\uc5ec CPU \ub97c \uc800\uc804\ub825 \ubaa8\ub4dc\ub85c \ubcc0\uacbd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\ub7ec \ubaa8\ub4dc\ub4e4\uc774 \uc788\ub294\ub370, C-State \ub77c\uace0 \ud558\uba70, C0 (\uc815\uc0c1 \uc791\ub3d9 \ubaa8\ub4dc) \ubd80\ud130 C1, C2, C3 \ub4f1\uc774 \uc788\uc2b5\ub2c8\ub2e4. [^4] CPU hotplug CPU hotplug \ub780 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 CPU \uc758 \uc804\uc6d0\uc744 \uc544\uc608 \uaebc\ubc84\ub9ac\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, Suspend To RAM \ucc98\ub7fc \uc804\uccb4 \uc2dc\uc2a4\ud15c\uc774 \uc808\uc804\ubaa8\ub4dc\ub85c \uac00\ub294 \uacbd\uc6b0, CPU \uac00 hotplug out \ub418\uc5b4 \uaebc\uc9d1\ub2c8\ub2e4. CPU\uac00 hotplug out \ub418\ub294 \uacbd\uc6b0\uc5d0\ub294 CPU \uac00 \ub2e4\uc2dc \ucf1c\uc9c0\uae30 (hotplug in) \uc804\uae4c\uc9c0\ub294 \uc544\uc608 \uc2a4\ucf00\uc904\ub9c1\uc5d0\uc11c\ub3c4 \uc81c\uc678\ub429\ub2c8\ub2e4. \uc704\uc758 CPUidle \uc740 \uc2a4\ucf00\uc904\ub9c1\uc774 \ud544\uc694\ud560 \ub54c CPU\uac00 \uc800\uc804\ub825 \ubaa8\ub4dc\uc5d0 \uc788\ub2e4\uac00 \ub2e4\uc2dc C0 \uc0c1\ud0dc\ub85c \ub3cc\uc544\uc62c \uc218 \uc788\ub2e4\ub294 \ucc28\uc774\uc810\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ub3d9\uc801 \uc804\uc6d0 \uad00\ub9ac\uc5d0 \ud574\ub2f9\ud558\ub294 Linux Framework \ubc0f Driver\ub97c \ubcf4\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. Regulator \uc804\uc555 (voltage) \uc744 \uacf5\uae09\ud558\ub294 PMIC \ub97c \uc81c\uc5b4\ud558\uae30 \uc704\ud55c framework \uc785\ub2c8\ub2e4. \uc804\uc555\uc744 \ubcc0\uacbd\ud558\uac70\ub098 \ucf1c\uace0 \ub044\ub294 \ub4f1\uc758 \ub3d9\uc791\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. CPUfreq \ub4f1 \ub2e4\ub978 driver \uc640 \ud568\uaed8 \uc4f0\uc774\uac8c \ub429\ub2c8\ub2e4. Clock Clock \uc744 \ub0ae\ucd94\uac70\ub098 Clock \uacf5\uae09\uc744 \uc911\ub2e8\ud560 \ub54c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 framework \uc785\ub2c8\ub2e4. CPUfreq \ub3d9\uc801 \uc804\uc555 \uc2a4\ucf00\uc77c\ub9c1 (Dynamic Voltage and Frequency Scaling; DVFS) \ub97c \uc704\ud55c framework \uc785\ub2c8\ub2e4. governor \uac00 \uc815\uae30\uc801\uc73c\ub85c \ubaa8\ub2c8\ud130\ub9c1\uc744 \ud558\uba74\uc11c cpu load \uc5d0 \ub530\ub77c \uc77c\uc774 \ubcc4\ub85c \uc5c6\uc744 \ub54c\ub294 \uc804\ub825 \uc18c\ube44\ub97c \uc808\uc57d\ud558\uae30 \uc704\ud574 CPU \ub97c \ub0ae\uc740 \ud074\ub77d \uc8fc\ud30c\uc218 & \uc804\uc555\uc73c\ub85c \ub3d9\uc791\ud558\uac8c \ud558\uace0, \uc77c\uc774 \ub9ce\uc744 \ub54c\ub294 \uc131\ub2a5\uc744 \uc704\ud574 \ub192\uc740 \ud074\ub77d \uc8fc\ud30c\uc218 & \uc804\uc555\uc73c\ub85c \ub3d9\uc791\ud558\uac8c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. governor \uc758 \uc885\ub958\uc5d0 \ub530\ub77c \ub2e4\ub978 \ubc29\uc2dd\uc73c\ub85c \ub3d9\uc791\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. Thermal Linux \uc758 Thermal Framework \ub97c \uc0ac\uc6a9\ud558\uba74 \uc628\ub3c4\uac00 \ub108\ubb34 \ub192\uc740 \uacbd\uc6b0 Cooling\uc744 \ud558\uac70\ub098 CPU \ud074\ub77d \uc8fc\ud30c\uc218\ub97c \ub0ae\ucdb0\uc11c \uc628\ub3c4\ub97c \ub0ae\ucd9c \uc218 \uc788\uc2b5\ub2c8\ub2e4. (Power \uac00 \uc99d\uac00\ud558\uba74 \uc628\ub3c4\ub3c4 \uc0c1\uc2b9\ud558\uba70, Power\uac00 \uac10\uc18c\ud558\uba74 \uc628\ub3c4\uac00 \ub0ae\uc544\uc9d1\ub2c8\ub2e4.) \ucc38\uace0 \uc790\ub8cc [^1]: Low Power Design: https://www.synopsys.com/glossary/what-is-low-power-design.html [^2]: Power Management Specification: https://elinux.org/Dynamic_Power_Management_Specification [^3 ]: Linux System Sleep States: https://www.kernel.org/doc/html/latest/admin-guide/pm/sleep-states.html [^4]: C-state: https://www.dell.com/support/kbdoc/ko-kr/000060621/c-state%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80","title":"\ud648"},{"location":"#welcome-to-linux-power-management-guide-document","text":"","title":"Welcome to Linux Power Management Guide Document"},{"location":"#power-management","text":"\ub9ce\uc740 \uc81c\ud488\ub4e4\uc774 \uc720\uc120 \uc804\uc6d0 \uacf5\uae09 \uc7a5\uce58\uac00 \uc544\ub2cc \ubc30\ud130\ub9ac\ub85c \uc804\uc6d0\uc774 \uacf5\uae09\ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c \ubc30\ud130\ub9ac\uc5d0 \uc800\uc7a5\ub41c \uc5d0\ub108\uc9c0\ub97c \ud6a8\uc728\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc911\uc694\ud569\ub2c8\ub2e4. (\ubc30\ud130\ub9ac \uc5d0\ub108\uc9c0\ub97c \ud6a8\uc728\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560\uc218\ub85d \ubc30\ud130\ub9ac \ucda9\uc804\ub2f9 \uc81c\ud488\uc758 \uc0ac\uc6a9 \uac00\ub2a5 \uc2dc\uac04\uc774 \uc99d\uac00\ud569\ub2c8\ub2e4) \uc804\uccb4 \uc804\ub825 \uc18c\ubaa8 \uc591\uc740 \ud06c\uac8c \ub3d9\uc801\uc778 \uc804\ub825 (Dynamic Power, Switching Power) \uacfc \uc815\uc801\uc778 \uc804\ub825 (Static Power, Leakage Power) \uc744 \ud569\ud55c \uac12\uc73c\ub85c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc815\uc801\uc778 \uc804\ub825\uc740 \uc544\ubb34 \ud65c\ub3d9\uc774 \uc5c6\ub294 \uc0c1\ud0dc\uc77c \ub54c\ub3c4 \uacc4\uc18d\ud574\uc11c \uc77c\uc815\ud558\uac8c \uc18c\ubaa8\ub418\ub294 \uc804\ub825\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \ubc18\uba74, \ub3d9\uc801\uc778 \uc804\ub825\uc740 \ud65c\ub3d9\uc774 \uc788\uc74c\uc73c\ub85c\uc368 \uc0dd\uaca8\ub098\ub294 \uc804\ub825 \uc18c\ubaa8\uc785\ub2c8\ub2e4.[^1] \uc544\ub798 \uadf8\ub798\ud504\ub97c \ubcf4\uba74 \uc5b8\uc81c\ub098 \uc18c\ubaa8\ub418\uace0 \uc788\ub294 \ucd5c\uc18c\ud55c\uc758 \uc591\uc774 \ubcf4\uc785\ub2c8\ub2e4. \uc774\uac83\uc774 Leakage Power \uc785\ub2c8\ub2e4. \uadf8 \uc704\uc5d0 Dyanmic Power \uac00 \ucd94\uac00\ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc5d0\ub108\uc9c0\ub97c \ud6a8\uc728\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c \ubc29\ubc95 (Power savings) \ub3c4 \ub450 \uac00\uc9c0\ub85c \ub098\ub220\ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.[^2] \uccab\ubc88\uc9f8\ub294 \uc815\uc801 \uc804\uc6d0 \uad00\ub9ac (Static Power Management) \ub85c \uc81c\ud488\uc774 \ube44\ud65c\uc131\ud654 (inactive) \uc0c1\ud0dc\uc77c \ub54c\ub098 \uc0ac\uc6a9\uc790\uac00 \uc2a4\uc704\uce58 \uc785\ub825 \ub4f1\uc73c\ub85c \uc120\ud0dd\ud55c \uacbd\uc6b0 \uc800\uc804\ub825 \uc2dc\uc2a4\ud15c \uc0c1\ud0dc (Low-power system states) \ub85c \uc804\ud658\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \ud639\uc740 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc788\ub294 \ubd80\ubd84\uc758 \uc804\uc6d0\ub9cc \ucc28\ub2e8\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ub450\ubc88\uc9f8\ub294 \ub3d9\uc801 \uc804\uc6d0 \uad00\ub9ac (Dynamic Power Management) \ub85c \uc81c\ud488\uc774 \uc0ac\uc6a9 \uc911\uc77c \ub54c \uc804\uc6d0\uc744 \uad00\ub9ac\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uc804\uc6d0 \uad00\ub9ac\uc5d0\ub294 CPU \uc8fc\ud30c\uc218 & \uc804\uc555 \uc870\uc815\uc774\ub098 \uc8fc\ubcc0 \uc7a5\uce58\uc758 \ud074\ub7ed \ubc0f \uc804\uc6d0 \uc81c\uc5b4 \ub4f1\uc774 \ud3ec\ud568\ub429\ub2c8\ub2e4.","title":"Power Management \uac00 \uc911\uc694\ud55c \uc774\uc720?"},{"location":"#static-power-management","text":"\uc815\uc801 \uc804\uc6d0 \uad00\ub9ac\ub294 \uc77c\ubd80 \ub610\ub294 \ubaa8\ub4e0 \uc2dc\uc2a4\ud15c \uad6c\uc131 \uc694\uc18c\uc758 \uc804\uc6d0\uc744 \uaebc\uc11c \uc800\uc804\ub825 \uc2dc\uc2a4\ud15c \uc0c1\ud0dc\ub85c \uc9c4\uc785\uc2dc\ud0b5\ub2c8\ub2e4. Linux \uc5d0\uc11c\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uc800\uc804\ub825 \uc2dc\uc2a4\ud15c \uc0c1\ud0dc (Low-power system states) \ud639\uc740 \uc2dc\uc2a4\ud15c \uc808\uc804 \uc0c1\ud0dc (System Sleep States) \ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4. [^3] Suspend-to-Idle Stanby Suspend-to-RAM Hibernation \ub610\ub294 Linux \uc5d0\uc11c \uc9c0\uc6d0\ud558\ub294 Runtime Power Management Framework \ub97c \uc0ac\uc6a9\ud558\uba74 \uc804\uc6d0\uc744 \uc81c\uc5b4\ud558\uace0 \uc2f6\uc740 \uc77c\ubd80 \uc601\uc5ed\uc774\ub098 \ub514\ubc14\uc774\uc2a4\uc758 \uc804\uc6d0\uc744 \uc644\uc804\ud788 \ub044\uac70\ub098 \ucf24 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7f0 \uc77c\ubd80\uac00 \uc544\ub2c8\ub77c \uc804\uccb4 \uc2dc\uc2a4\ud15c\uc758 \uc804\uc6d0\uc744 \uad00\ub9ac\ud558\ub824\uba74 \uc704\uc5d0\uc11c \uc18c\uac1c\ud55c Suspend To RAM \ub4f1\uc758 \uae30\ub2a5\uc744 \uc774\uc6a9\ud574\uc57c\ud569\ub2c8\ub2e4.","title":"Static Power Management"},{"location":"#dynamic-power-management","text":"\uc815\uc801\uc73c\ub85c \uc804\ub825 \uad00\ub9ac\ub97c \uc704\ud574\uc11c\ub294 \uc804\uc555\uc774\ub098 \ud074\ub77d \uc8fc\ud30c\uc218\ub97c \ub0ae\ucd94\ub294 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud639\uc740 \uc628\ub3c4 \uc13c\uc11c\ub97c \ud1b5\ud574 \ud604\uc7ac CPU \uc758 \uc628\ub3c4\ub97c \ud655\uc778\ud558\uc5ec \uc2dc\uc2a4\ud15c\uc744 \ubcf4\ud638\ud558\uae30 \uc704\ud574 \uc804\uc555\uc774\ub098 \ud074\ub77d \uc8fc\ud30c\uc218\ub97c \ub0ae\ucda5\ub2c8\ub2e4. \uc804\uc555\uc774\ub098 \ud074\ub77d \uc8fc\ud30c\uc218\ub97c \ub0ae\ucdb0\uc11c \uc804\ub825 \uc18c\ube44\ub97c \uc904\uc774\uac8c \ub418\uba74 \uc628\ub3c4\uac00 \uac10\uc18c\ud569\ub2c8\ub2e4. CPU frequency Scaling (Dynamic Voltage and Frequency Scaling; DVFS) Dynamic Thermal Management \uc544\ub798\ub294 \uc804\uccb4 \ubcf4\ub4dc \uc704\uc758 CPU \uc758 \uc704\uce58 \ubc0f CPU \uadfc\ucc98\uc758 \uc628\ub3c4 \uc13c\uc11c\uac00 \uc704\uce58\ud55c \uc608\uc2dc\uc785\ub2c8\ub2e4.","title":"Dynamic Power Management"},{"location":"#linux-power-framework","text":"Linux \uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \uc804\ub825 \uad00\ub9ac\ub97c \uc704\ud55c Framework \ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. \uc774\ub97c Static Power \uc640 Dynamic Power \ub85c \ubd84\ub9ac\ud574\uc11c \ubcf4\uba74 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4. \uc815\uc801 \uc804\uc6d0 \uad00\ub9ac\uc5d0 \ud574\ub2f9\ud558\ub294 Linux Framework \ubc0f Driver\ub97c \ubcf4\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. Suspend To RAM \uc2dc\uc2a4\ud15c\uc774 \ucf1c\uc838\uc788\uc744 \ub54c \uc77c\uc815\ud558\uac8c \uc18c\ube44\ub418\ub294 \uc804\ub825\uc744 \uc904\uc774\uae30 \uc704\ud574\uc11c\ub294 \uc804\uccb4 \uc2dc\uc2a4\ud15c\uc744 \uc808\uc804 \uc0c1\ud0dc (Suspend To RAM) \ub85c \ubcc0\uacbd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Runtime PM \uc804\uccb4 \uc2dc\uc2a4\ud15c\uc774 \uc544\ub2cc \uc77c\ubd80 \ub514\ubc14\uc774\uc2a4 \ub4f1\uc758 \uc804\uc6d0\uc744 \ucf1c\uac70\ub098 \ub044\ub3c4\ub85d \uad00\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. CPUidle CPU \uac00 \ud560 \uc77c\uc774 \uc5c6\uc744 \ub54c\ub294 \uc5d0\ub108\uc9c0 \uc808\uc57d\uc744 \uc704\ud558\uc5ec CPU \ub97c \uc800\uc804\ub825 \ubaa8\ub4dc\ub85c \ubcc0\uacbd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\ub7ec \ubaa8\ub4dc\ub4e4\uc774 \uc788\ub294\ub370, C-State \ub77c\uace0 \ud558\uba70, C0 (\uc815\uc0c1 \uc791\ub3d9 \ubaa8\ub4dc) \ubd80\ud130 C1, C2, C3 \ub4f1\uc774 \uc788\uc2b5\ub2c8\ub2e4. [^4] CPU hotplug CPU hotplug \ub780 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 CPU \uc758 \uc804\uc6d0\uc744 \uc544\uc608 \uaebc\ubc84\ub9ac\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, Suspend To RAM \ucc98\ub7fc \uc804\uccb4 \uc2dc\uc2a4\ud15c\uc774 \uc808\uc804\ubaa8\ub4dc\ub85c \uac00\ub294 \uacbd\uc6b0, CPU \uac00 hotplug out \ub418\uc5b4 \uaebc\uc9d1\ub2c8\ub2e4. CPU\uac00 hotplug out \ub418\ub294 \uacbd\uc6b0\uc5d0\ub294 CPU \uac00 \ub2e4\uc2dc \ucf1c\uc9c0\uae30 (hotplug in) \uc804\uae4c\uc9c0\ub294 \uc544\uc608 \uc2a4\ucf00\uc904\ub9c1\uc5d0\uc11c\ub3c4 \uc81c\uc678\ub429\ub2c8\ub2e4. \uc704\uc758 CPUidle \uc740 \uc2a4\ucf00\uc904\ub9c1\uc774 \ud544\uc694\ud560 \ub54c CPU\uac00 \uc800\uc804\ub825 \ubaa8\ub4dc\uc5d0 \uc788\ub2e4\uac00 \ub2e4\uc2dc C0 \uc0c1\ud0dc\ub85c \ub3cc\uc544\uc62c \uc218 \uc788\ub2e4\ub294 \ucc28\uc774\uc810\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ub3d9\uc801 \uc804\uc6d0 \uad00\ub9ac\uc5d0 \ud574\ub2f9\ud558\ub294 Linux Framework \ubc0f Driver\ub97c \ubcf4\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. Regulator \uc804\uc555 (voltage) \uc744 \uacf5\uae09\ud558\ub294 PMIC \ub97c \uc81c\uc5b4\ud558\uae30 \uc704\ud55c framework \uc785\ub2c8\ub2e4. \uc804\uc555\uc744 \ubcc0\uacbd\ud558\uac70\ub098 \ucf1c\uace0 \ub044\ub294 \ub4f1\uc758 \ub3d9\uc791\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. CPUfreq \ub4f1 \ub2e4\ub978 driver \uc640 \ud568\uaed8 \uc4f0\uc774\uac8c \ub429\ub2c8\ub2e4. Clock Clock \uc744 \ub0ae\ucd94\uac70\ub098 Clock \uacf5\uae09\uc744 \uc911\ub2e8\ud560 \ub54c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 framework \uc785\ub2c8\ub2e4. CPUfreq \ub3d9\uc801 \uc804\uc555 \uc2a4\ucf00\uc77c\ub9c1 (Dynamic Voltage and Frequency Scaling; DVFS) \ub97c \uc704\ud55c framework \uc785\ub2c8\ub2e4. governor \uac00 \uc815\uae30\uc801\uc73c\ub85c \ubaa8\ub2c8\ud130\ub9c1\uc744 \ud558\uba74\uc11c cpu load \uc5d0 \ub530\ub77c \uc77c\uc774 \ubcc4\ub85c \uc5c6\uc744 \ub54c\ub294 \uc804\ub825 \uc18c\ube44\ub97c \uc808\uc57d\ud558\uae30 \uc704\ud574 CPU \ub97c \ub0ae\uc740 \ud074\ub77d \uc8fc\ud30c\uc218 & \uc804\uc555\uc73c\ub85c \ub3d9\uc791\ud558\uac8c \ud558\uace0, \uc77c\uc774 \ub9ce\uc744 \ub54c\ub294 \uc131\ub2a5\uc744 \uc704\ud574 \ub192\uc740 \ud074\ub77d \uc8fc\ud30c\uc218 & \uc804\uc555\uc73c\ub85c \ub3d9\uc791\ud558\uac8c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. governor \uc758 \uc885\ub958\uc5d0 \ub530\ub77c \ub2e4\ub978 \ubc29\uc2dd\uc73c\ub85c \ub3d9\uc791\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. Thermal Linux \uc758 Thermal Framework \ub97c \uc0ac\uc6a9\ud558\uba74 \uc628\ub3c4\uac00 \ub108\ubb34 \ub192\uc740 \uacbd\uc6b0 Cooling\uc744 \ud558\uac70\ub098 CPU \ud074\ub77d \uc8fc\ud30c\uc218\ub97c \ub0ae\ucdb0\uc11c \uc628\ub3c4\ub97c \ub0ae\ucd9c \uc218 \uc788\uc2b5\ub2c8\ub2e4. (Power \uac00 \uc99d\uac00\ud558\uba74 \uc628\ub3c4\ub3c4 \uc0c1\uc2b9\ud558\uba70, Power\uac00 \uac10\uc18c\ud558\uba74 \uc628\ub3c4\uac00 \ub0ae\uc544\uc9d1\ub2c8\ub2e4.)","title":"Linux Power Framework"},{"location":"#_1","text":"[^1]: Low Power Design: https://www.synopsys.com/glossary/what-is-low-power-design.html [^2]: Power Management Specification: https://elinux.org/Dynamic_Power_Management_Specification [^3 ]: Linux System Sleep States: https://www.kernel.org/doc/html/latest/admin-guide/pm/sleep-states.html [^4]: C-state: https://www.dell.com/support/kbdoc/ko-kr/000060621/c-state%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80","title":"\ucc38\uace0 \uc790\ub8cc"},{"location":"01_CPU/01_01_cpu_index/","text":"CPU \ubcf8 \ud398\uc774\uc9c0\ub294 CPU Power Management \uad00\ub828 \ubb38\uc11c\uc758 \ubaa9\ucc28 \ud398\uc774\uc9c0\uc785\ub2c8\ub2e4. CPU Hotplug Linux kernel supports CPU hotplug and this feature can be used to get the preferred number of CPUs online depending on the application. Taking a CPU offline turns-off the core thus saving power. \ucc38\uace0 CPU hotplug is a technique that can dynamically switch cores on or off. Hotplug can be used by the OSPM to change available compute capacity based on current compute requirements. Hotplug is also sometimes used for reliability reasons. \ucc38\uace0 Frequency Managment with cpufreq Linux supports CPU frequency scaling based on different governors. These settings can be enabled in Petalinux and controlled using sysfs entries at runtime. Idle Management with CPU Idle Linux kernel supports automatically idling of CPUs that are idle at runtime. This feature helps in automatically turning-off the cores that are idle to save power. CPU\uc758 C-states cpuidle driver \uc815\ub9ac https://www.cnx-software.com/2013/01/17/debugging-embedded-linux-kernel-power-management-elce-2012/ SMP PSCI Reference Zynq UltraScale + MPSoC Developer Guide - PSCI NVIDIA Jetson Nano and Jetson TX1 Devices Power Management Xilinx Wiki CPU Power Management","title":"CPU"},{"location":"01_CPU/01_01_cpu_index/#cpu","text":"\ubcf8 \ud398\uc774\uc9c0\ub294 CPU Power Management \uad00\ub828 \ubb38\uc11c\uc758 \ubaa9\ucc28 \ud398\uc774\uc9c0\uc785\ub2c8\ub2e4. CPU Hotplug Linux kernel supports CPU hotplug and this feature can be used to get the preferred number of CPUs online depending on the application. Taking a CPU offline turns-off the core thus saving power. \ucc38\uace0 CPU hotplug is a technique that can dynamically switch cores on or off. Hotplug can be used by the OSPM to change available compute capacity based on current compute requirements. Hotplug is also sometimes used for reliability reasons. \ucc38\uace0 Frequency Managment with cpufreq Linux supports CPU frequency scaling based on different governors. These settings can be enabled in Petalinux and controlled using sysfs entries at runtime. Idle Management with CPU Idle Linux kernel supports automatically idling of CPUs that are idle at runtime. This feature helps in automatically turning-off the cores that are idle to save power.","title":"CPU"},{"location":"01_CPU/01_01_cpu_index/#cpu-c-states","text":"cpuidle driver \uc815\ub9ac https://www.cnx-software.com/2013/01/17/debugging-embedded-linux-kernel-power-management-elce-2012/ SMP PSCI Reference Zynq UltraScale + MPSoC Developer Guide - PSCI NVIDIA Jetson Nano and Jetson TX1 Devices Power Management Xilinx Wiki CPU Power Management","title":"CPU\uc758 C-states"},{"location":"03_DVFS/03_01_dvfs_driver/","text":"DVFS Definition of Dynamic Voltage Frequency Scaling Linux CPUFreq Framework Linux CPUFreq Governor Linux CPUFreq sysfs command Dynamic Voltage Frequency Scaling Dynamic Voltage Frequency Scaling is enabled by default, so the CPU frequency and voltages of a running system will adapt to the system's load. The DVFS subsystem is controlled through the /sys/devices/system/cpu/cpu*N*/cpufreq/ sysfs path, where N corresponds to the core number: https://www.digi.com/resources/documentation/digidocs/90001546/reference/bsp/v4-1_cc6/r_power_management.htm?TocPath=Digi%20Embedded%20Yocto%7CSystem%20development%7CLinux%20Board%20Support%20Package%7CDevices%20and%20interfaces%7C_____14 Dynamic frequency scaling\uc740 CPU throttling\uc774\ub77c\uace0\ub3c4 \ud569\ub2c8\ub2e4. [\ucd9c\ucc98] https://en.wikipedia.org/wiki/Dynamic_frequency_scaling Linux \uacf5\uc2dd \ubb38\uc11c\uc5d0 CPU Performance Scaling\uc740 Working-State Power Management\ub85c \ubd84\ub958\ub418\uc5b4\uc788\uc2b5\ub2c8\ub2e4. Linux CPUFreq Framework Linux\uc5d0\uc11c CPU Performance Scaling\uc740 CPUFreq (CPU Frequency scaling) \ucf54\ub4dc\ub97c \ud1b5\ud574 \uc774\ub8e8\uc5b4\uc9d1\ub2c8\ub2e4. CPUFreq\ub294 3\uac00\uc9c0 layer\ub85c \uc774\ub8e8\uc5b4\uc838\uc788\uc2b5\ub2c8\ub2e4. CPUFreq core: \ub2e4\ub978 component\ub4e4\uc774 \ub3d9\uc791\ud558\ub294 \uae30\ubcf8\uc801\uc778 framework \ubd80\ubd84\uc785\ub2c8\ub2e4. \uacf5\ud1b5\uc801\uc778 \uad6c\uc870\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. Scaling governor: CPU capacity\ub97c \ucd94\uc815\ud558\ub294\ub370 \uc0ac\uc6a9\ub418\ub294 \uc54c\uace0\ub9ac\uc998\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4. Scaling drivers: scaling governor\uc5d0\uac8c \uc694\uccad\ubc1b\uc740 CPU \uc0c1\ud0dc \ubcc0\uacbd\uc744 \uc704\ud558\uc5ec hardware \uc5d0 \uc811\uadfc\ud558\ub294 \ubd80\ubd84\uc785\ub2c8\ub2e4. Scaling governor performance: scaling_max_freq\ub098 scaling_min_freq \uc81c\ud55c\uc774 \ubcc0\uacbd\ub420 \ub54c\ub9cc governor\uac00 \uc124\uc815\ub418\uba70, \uac00\uc7a5 \ub192\uc740 frequency\ub85c \uc124\uc815\ub429\ub2c8\ub2e4. powersave: \uc704\uc640 \ubc18\ub300\ub85c lowest frequency \ub85c \uc124\uc815\ub429\ub2c8\ub2e4. userspace: governor\uac00 \uc9c1\uc811 \ub3d9\uc791\ud558\uc9c0\ub294 \uc54a\uace0 user space\uc5d0\uc11c scaling_setspeed\ub97c \uc124\uc815\ud558\uba74 CPU frequency\uac00 \uc124\uc815\ub429\ub2c8\ub2e4. schedutil: CPU scheduler\ub97c \ud1b5\ud574\uc11c \uc5bb\uc740 CPU utilization \uc815\ubcf4\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. scheduling class \uc5d0 \ub530\ub77c frequency\ub97c \uc62c\ub9b4 \uac83\uc778\uc9c0 \ub0b4\ub9b4 \uac83\uc778\uc9c0\uac00 \uacb0\uc815\ub429\ub2c8\ub2e4. ondemand: CPU load \uac12\uc73c\ub85c CPU frequency\ub97c \uacb0\uc815\ud569\ub2c8\ub2e4. CPU load\ub294 \uc804\uccb4 CPU time \uc911\uc5d0 active time (non-idle) \uc774\uc5c8\ub358 \ube44\uc728\ub85c \uacc4\uc0b0\ub429\ub2c8\ub2e4. CPU load\uac00 \uc62c\ub77c\uac00\uba74 Cpu frequency\ub97c \uc62c\ub9bd\ub2c8\ub2e4. CPU load\uac00 1\uc774\uba74 (100%) cpuinfo_max_freq \uac12\uc73c\ub85c \uc124\uc815\ub418\uace0, 0 \uc774\uba74 (0%) cpuinfo_min_freq \uac12\uc73c\ub85c \uc124\uc815\ub429\ub2c8\ub2e4. \ub610\ud55c speedup threshold\ub97c \uc815\ud574\ub450\uba74, \uadf8\uac83\uc744 \ub118\uc73c\uba74 max cpu frequency\ub85c \uc124\uc815\ub429\ub2c8\ub2e4. conservative: \uc774\uac83\ub3c4 ondemand governor \ucc98\ub7fc CPU load\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc774\uac83\uc740 threshold\ub97c \ub118\uc5c8\ub294\uc9c0 \uc548 \ub118\uc5c8\ub294\uc9c0\uc5d0 \ub530\ub77c \uc0c1\ub300\uc801\uc73c\ub85c \uc870\uae08\uc529 frequency\ub97c \ubcc0\ud654\uc2dc\ud0b5\ub2c8\ub2e4. [\ucd9c\ucc98] https://www.kernel.org/doc/html/v4.14/admin-guide/pm/cpufreq.html sysfs command cpufreq \uad00\ub828 \uac00\ub2a5\ud55c sysfs \uba85\ub839\uc5b4\ub4e4\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. # ls /sys/devices/system/cpu/cpu0/cpufreq/ affected_cpus related_cpus scaling_governor cpuinfo_cur_freq scaling_available_frequencies scaling_max_freq cpuinfo_max_freq scaling_available_governors scaling_min_freq cpuinfo_min_freq scaling_cur_freq scaling_setspeed cpuinfo_transition_latency scaling_driver stats currnet operating frequency \ud655\uc778 # cat /sys/devices/system/cpu/cpu4/cpufreq/scaling_cur_freq 1150000 \uc124\uc815 \uac00\ub2a5\ud55c frequency \uac12\ub4e4 \ud655\uc778 # cat /sys/devices/system/cpu/cpu4/cpufreq/scaling_available_frequencies 600000 900000 1150000 \uc124\uc815 \uac00\ub2a5\ud55c governor\ub4e4 \ud655\uc778 # cat /sys/devices/system/cpu/cpu4/cpufreq/scaling_available_governors ondemand userspace interactive performance governor \uc120\ud0dd # echo userspace > /sys/devices/system/cpu/cpu4/cpufreq/scaling_governor [\ucd9c\ucc98] https://www.digi.com/resources/documentation/digidocs/90001546/reference/bsp/v4-1_cc6/r_power_management.htm?TocPath=Digi%20Embedded%20Yocto%7CSystem%20development%7CLinux%20Board%20Support%20Package%7CDevices%20and%20interfaces%7C_____14 [\ucd9c\ucc98] https://community.arm.com/developer/tools-software/oss-platforms/w/docs/528/cpufreq-dvfs Kernel Build \uc2dc Governor \uc120\ud0dd Default governor is \"performance\". The default governor can be changed through 'menuconfig'. Multiple governors can be built and exist in the kernel by selecting them through \"menuconfig\". Select the governors you want to build in to kernel. CPU Power management options ---> [*] CPU frequency scaling Default CPUFreq governor (performance) ---> [*] performance [*] userspace [*] ondemand [] conservative [\ucd9c\ucc98] DVFS (Dynamic Voltage and Frequency scaling) Disabler | \uc791\uc131\uc790 \uc5d0\ud504\ub7a8 EFRAM [\ucd9c\ucc98] https://wiki.somlabs.com/index.php/How_to_scale_CPU_frequency_with_DVFS_framework The infrastructure of CPUfreq [\ucd9c\ucc98] https://www.mdpi.com/1424-8220/18/9/3068/htm Voltage Scaling The voltage layer consists of the information of all voltage domains in the system and configures all vdds during voltage layer initialization. When a vdd is configured a regulator supply handle is acquired and stored in the corresponding vdd structure.The regulators scale/set voltage function is plugged in to the vdd's voltage scale function pointer. Thus when a voltage change is requested forwarded to a vdd. The voltage layer requests the regulator framework to change the device voltage to the target voltage. Regluator driver verifies if the target voltage is in with in the limits of the voltage domain and regulator supply constraints. If all the checks go through then regulator changes the voltage of the requested device to the target voltage. [\ucd9c\ucc98] DVFS (Dynamic Voltage and Frequency scaling) Disabler | \uc791\uc131\uc790 \uc5d0\ud504\ub7a8 EFRAM Note Linux \uacf5\uc2dd\ubb38\uc11c\uc5d0\uc11c \ub098\uc624\ub294 CPU\ub77c\ub294 \uc6a9\uc5b4\ub294 logical CPU\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. processor \ub77c\ub294 \uc6a9\uc5b4\ub97c \uc0ac\uc6a9\ud560 \ub54c\ub9cc logical CPU\ub4e4\uc744 \ud3ec\ud568\ud558\ub294 \ubb3c\ub9ac\uc801\uc778 \uc758\ubbf8\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. logical CPU\ub294 processor \uc548\uc5d0 core\ub97c \uc758\ubbf8\ud558\uac70\ub098 hardware thread\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. Note that the logical CPU may be a physical single-core processor, or a single core in a multicore processor, or a hardware thread in a physical processor or processor core. In what follows \u201cCPU\u201d always means \u201clogical CPU\u201d unless explicitly stated otherwise and the word \u201cprocessor\u201d is used to refer to the physical part possibly including multiple logical CPUs. [\ucd9c\ucc98] https://www.kernel.org/doc/html/v4.14/admin-guide/pm/cpufreq.html cf) DEVFREQ cf) PM QoS https://events.static.linuxfound.org/images/stories/pdf/lcjp2012_ham.pdf cpufreq \uc5d0 \ub300\ud55c \uc804\ubc18\uc801 \uc124\uba85 \ucc38\uace0 https://linux-sunxi.org/Cpufreq CPUfreq benchmark \uacb0\uacfc [\ucd9c\ucc98] https://community.centminmod.com/media/e-2276g-3-10-kernel-cpufreq-all.44/ Temperature \uadf8\ub798\ud504 Current \uadf8\ub798\ud504 [\ucd9c\ucc98] https://linux-sunxi.org/Cpufreq DVS \uc640 DPM \uc744 \ub098\ub220\uc11c \uc124\uba85\ud558\uae30\ub3c4 \ud568 https://dl.acm.org/doi/abs/10.1145/1450058.1450073 Reference Using the Power Management Features of the Xen Kernel on Lenovo ThinkSystem Servers","title":"DVFS"},{"location":"03_DVFS/03_01_dvfs_driver/#dvfs","text":"Definition of Dynamic Voltage Frequency Scaling Linux CPUFreq Framework Linux CPUFreq Governor Linux CPUFreq sysfs command","title":"DVFS"},{"location":"03_DVFS/03_01_dvfs_driver/#dynamic-voltage-frequency-scaling","text":"Dynamic Voltage Frequency Scaling is enabled by default, so the CPU frequency and voltages of a running system will adapt to the system's load. The DVFS subsystem is controlled through the /sys/devices/system/cpu/cpu*N*/cpufreq/ sysfs path, where N corresponds to the core number: https://www.digi.com/resources/documentation/digidocs/90001546/reference/bsp/v4-1_cc6/r_power_management.htm?TocPath=Digi%20Embedded%20Yocto%7CSystem%20development%7CLinux%20Board%20Support%20Package%7CDevices%20and%20interfaces%7C_____14 Dynamic frequency scaling\uc740 CPU throttling\uc774\ub77c\uace0\ub3c4 \ud569\ub2c8\ub2e4. [\ucd9c\ucc98] https://en.wikipedia.org/wiki/Dynamic_frequency_scaling Linux \uacf5\uc2dd \ubb38\uc11c\uc5d0 CPU Performance Scaling\uc740 Working-State Power Management\ub85c \ubd84\ub958\ub418\uc5b4\uc788\uc2b5\ub2c8\ub2e4.","title":"Dynamic Voltage Frequency Scaling"},{"location":"03_DVFS/03_01_dvfs_driver/#linux-cpufreq-framework","text":"Linux\uc5d0\uc11c CPU Performance Scaling\uc740 CPUFreq (CPU Frequency scaling) \ucf54\ub4dc\ub97c \ud1b5\ud574 \uc774\ub8e8\uc5b4\uc9d1\ub2c8\ub2e4. CPUFreq\ub294 3\uac00\uc9c0 layer\ub85c \uc774\ub8e8\uc5b4\uc838\uc788\uc2b5\ub2c8\ub2e4. CPUFreq core: \ub2e4\ub978 component\ub4e4\uc774 \ub3d9\uc791\ud558\ub294 \uae30\ubcf8\uc801\uc778 framework \ubd80\ubd84\uc785\ub2c8\ub2e4. \uacf5\ud1b5\uc801\uc778 \uad6c\uc870\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. Scaling governor: CPU capacity\ub97c \ucd94\uc815\ud558\ub294\ub370 \uc0ac\uc6a9\ub418\ub294 \uc54c\uace0\ub9ac\uc998\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4. Scaling drivers: scaling governor\uc5d0\uac8c \uc694\uccad\ubc1b\uc740 CPU \uc0c1\ud0dc \ubcc0\uacbd\uc744 \uc704\ud558\uc5ec hardware \uc5d0 \uc811\uadfc\ud558\ub294 \ubd80\ubd84\uc785\ub2c8\ub2e4.","title":"Linux CPUFreq Framework"},{"location":"03_DVFS/03_01_dvfs_driver/#scaling-governor","text":"performance: scaling_max_freq\ub098 scaling_min_freq \uc81c\ud55c\uc774 \ubcc0\uacbd\ub420 \ub54c\ub9cc governor\uac00 \uc124\uc815\ub418\uba70, \uac00\uc7a5 \ub192\uc740 frequency\ub85c \uc124\uc815\ub429\ub2c8\ub2e4. powersave: \uc704\uc640 \ubc18\ub300\ub85c lowest frequency \ub85c \uc124\uc815\ub429\ub2c8\ub2e4. userspace: governor\uac00 \uc9c1\uc811 \ub3d9\uc791\ud558\uc9c0\ub294 \uc54a\uace0 user space\uc5d0\uc11c scaling_setspeed\ub97c \uc124\uc815\ud558\uba74 CPU frequency\uac00 \uc124\uc815\ub429\ub2c8\ub2e4. schedutil: CPU scheduler\ub97c \ud1b5\ud574\uc11c \uc5bb\uc740 CPU utilization \uc815\ubcf4\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. scheduling class \uc5d0 \ub530\ub77c frequency\ub97c \uc62c\ub9b4 \uac83\uc778\uc9c0 \ub0b4\ub9b4 \uac83\uc778\uc9c0\uac00 \uacb0\uc815\ub429\ub2c8\ub2e4. ondemand: CPU load \uac12\uc73c\ub85c CPU frequency\ub97c \uacb0\uc815\ud569\ub2c8\ub2e4. CPU load\ub294 \uc804\uccb4 CPU time \uc911\uc5d0 active time (non-idle) \uc774\uc5c8\ub358 \ube44\uc728\ub85c \uacc4\uc0b0\ub429\ub2c8\ub2e4. CPU load\uac00 \uc62c\ub77c\uac00\uba74 Cpu frequency\ub97c \uc62c\ub9bd\ub2c8\ub2e4. CPU load\uac00 1\uc774\uba74 (100%) cpuinfo_max_freq \uac12\uc73c\ub85c \uc124\uc815\ub418\uace0, 0 \uc774\uba74 (0%) cpuinfo_min_freq \uac12\uc73c\ub85c \uc124\uc815\ub429\ub2c8\ub2e4. \ub610\ud55c speedup threshold\ub97c \uc815\ud574\ub450\uba74, \uadf8\uac83\uc744 \ub118\uc73c\uba74 max cpu frequency\ub85c \uc124\uc815\ub429\ub2c8\ub2e4. conservative: \uc774\uac83\ub3c4 ondemand governor \ucc98\ub7fc CPU load\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc774\uac83\uc740 threshold\ub97c \ub118\uc5c8\ub294\uc9c0 \uc548 \ub118\uc5c8\ub294\uc9c0\uc5d0 \ub530\ub77c \uc0c1\ub300\uc801\uc73c\ub85c \uc870\uae08\uc529 frequency\ub97c \ubcc0\ud654\uc2dc\ud0b5\ub2c8\ub2e4. [\ucd9c\ucc98] https://www.kernel.org/doc/html/v4.14/admin-guide/pm/cpufreq.html","title":"Scaling governor"},{"location":"03_DVFS/03_01_dvfs_driver/#sysfs-command","text":"cpufreq \uad00\ub828 \uac00\ub2a5\ud55c sysfs \uba85\ub839\uc5b4\ub4e4\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. # ls /sys/devices/system/cpu/cpu0/cpufreq/ affected_cpus related_cpus scaling_governor cpuinfo_cur_freq scaling_available_frequencies scaling_max_freq cpuinfo_max_freq scaling_available_governors scaling_min_freq cpuinfo_min_freq scaling_cur_freq scaling_setspeed cpuinfo_transition_latency scaling_driver stats currnet operating frequency \ud655\uc778 # cat /sys/devices/system/cpu/cpu4/cpufreq/scaling_cur_freq 1150000 \uc124\uc815 \uac00\ub2a5\ud55c frequency \uac12\ub4e4 \ud655\uc778 # cat /sys/devices/system/cpu/cpu4/cpufreq/scaling_available_frequencies 600000 900000 1150000 \uc124\uc815 \uac00\ub2a5\ud55c governor\ub4e4 \ud655\uc778 # cat /sys/devices/system/cpu/cpu4/cpufreq/scaling_available_governors ondemand userspace interactive performance governor \uc120\ud0dd # echo userspace > /sys/devices/system/cpu/cpu4/cpufreq/scaling_governor [\ucd9c\ucc98] https://www.digi.com/resources/documentation/digidocs/90001546/reference/bsp/v4-1_cc6/r_power_management.htm?TocPath=Digi%20Embedded%20Yocto%7CSystem%20development%7CLinux%20Board%20Support%20Package%7CDevices%20and%20interfaces%7C_____14 [\ucd9c\ucc98] https://community.arm.com/developer/tools-software/oss-platforms/w/docs/528/cpufreq-dvfs","title":"sysfs command"},{"location":"03_DVFS/03_01_dvfs_driver/#kernel-build-governor","text":"Default governor is \"performance\". The default governor can be changed through 'menuconfig'. Multiple governors can be built and exist in the kernel by selecting them through \"menuconfig\". Select the governors you want to build in to kernel. CPU Power management options ---> [*] CPU frequency scaling Default CPUFreq governor (performance) ---> [*] performance [*] userspace [*] ondemand [] conservative [\ucd9c\ucc98] DVFS (Dynamic Voltage and Frequency scaling) Disabler | \uc791\uc131\uc790 \uc5d0\ud504\ub7a8 EFRAM [\ucd9c\ucc98] https://wiki.somlabs.com/index.php/How_to_scale_CPU_frequency_with_DVFS_framework The infrastructure of CPUfreq [\ucd9c\ucc98] https://www.mdpi.com/1424-8220/18/9/3068/htm","title":"Kernel Build \uc2dc Governor \uc120\ud0dd"},{"location":"03_DVFS/03_01_dvfs_driver/#voltage-scaling","text":"The voltage layer consists of the information of all voltage domains in the system and configures all vdds during voltage layer initialization. When a vdd is configured a regulator supply handle is acquired and stored in the corresponding vdd structure.The regulators scale/set voltage function is plugged in to the vdd's voltage scale function pointer. Thus when a voltage change is requested forwarded to a vdd. The voltage layer requests the regulator framework to change the device voltage to the target voltage. Regluator driver verifies if the target voltage is in with in the limits of the voltage domain and regulator supply constraints. If all the checks go through then regulator changes the voltage of the requested device to the target voltage. [\ucd9c\ucc98] DVFS (Dynamic Voltage and Frequency scaling) Disabler | \uc791\uc131\uc790 \uc5d0\ud504\ub7a8 EFRAM","title":"Voltage Scaling"},{"location":"03_DVFS/03_01_dvfs_driver/#note","text":"Linux \uacf5\uc2dd\ubb38\uc11c\uc5d0\uc11c \ub098\uc624\ub294 CPU\ub77c\ub294 \uc6a9\uc5b4\ub294 logical CPU\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. processor \ub77c\ub294 \uc6a9\uc5b4\ub97c \uc0ac\uc6a9\ud560 \ub54c\ub9cc logical CPU\ub4e4\uc744 \ud3ec\ud568\ud558\ub294 \ubb3c\ub9ac\uc801\uc778 \uc758\ubbf8\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. logical CPU\ub294 processor \uc548\uc5d0 core\ub97c \uc758\ubbf8\ud558\uac70\ub098 hardware thread\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. Note that the logical CPU may be a physical single-core processor, or a single core in a multicore processor, or a hardware thread in a physical processor or processor core. In what follows \u201cCPU\u201d always means \u201clogical CPU\u201d unless explicitly stated otherwise and the word \u201cprocessor\u201d is used to refer to the physical part possibly including multiple logical CPUs. [\ucd9c\ucc98] https://www.kernel.org/doc/html/v4.14/admin-guide/pm/cpufreq.html","title":"Note"},{"location":"03_DVFS/03_01_dvfs_driver/#cf-devfreq","text":"","title":"cf) DEVFREQ"},{"location":"03_DVFS/03_01_dvfs_driver/#cf-pm-qos","text":"https://events.static.linuxfound.org/images/stories/pdf/lcjp2012_ham.pdf cpufreq \uc5d0 \ub300\ud55c \uc804\ubc18\uc801 \uc124\uba85 \ucc38\uace0 https://linux-sunxi.org/Cpufreq CPUfreq benchmark \uacb0\uacfc [\ucd9c\ucc98] https://community.centminmod.com/media/e-2276g-3-10-kernel-cpufreq-all.44/ Temperature \uadf8\ub798\ud504 Current \uadf8\ub798\ud504 [\ucd9c\ucc98] https://linux-sunxi.org/Cpufreq DVS \uc640 DPM \uc744 \ub098\ub220\uc11c \uc124\uba85\ud558\uae30\ub3c4 \ud568 https://dl.acm.org/doi/abs/10.1145/1450058.1450073 Reference Using the Power Management Features of the Xen Kernel on Lenovo ThinkSystem Servers","title":"cf) PM QoS"},{"location":"04_Thermal/04_01_thermal_framework/","text":"Thermal Framework Thermal Framework Overview https://www.cnblogs.com/arnoldlu/p/11207142.html Throttling and Tripping Governor gov_bang_bang gov_power_allocator gov_user_space gov_fair_share gov_step_wise Linaro Presentation: https://static.linaro.org/connect/san19/presentations/san19-101.pdf Power Allocator Governor PID \uc81c\uc5b4 \uc54c\uace0\ub9ac\uc998\uc744 \ud65c\uc6a9\ud558\uc5ec, \uc6d0\ud558\ub294 \uc628\ub3c4\uac00 \ub420 \ub54c\uae4c\uc9c0 \uc815\ud574\uc9c4 power budget (\ubc30\ud130\ub9ac \uc6a9\ub7c9) \ub0b4\uc5d0\uc11c power allocation \uc744 \uc870\uc815\ud558\ub294 \uac83\uc774\ub2e4. P_max = k_p * e + k_i * err_integral + k_d * diff_err + sustainable_power \ubaa9\ud45c\uce58\uac00 100\uc77c \ub54c, \ud604\uc7ac \uc628\ub3c4\uac00 110\ub3c4\ub77c\uba74 overshoot \uc0c1\ud0dc\uc774\uace0, P\ub97c -10*k_po \ub85c \uacc4\uc0b0\ud558\uace0, \ud604\uc7ac \uc628\ub3c4\uac00 30\ub3c4\ub77c\uba74 undershoot\ub85c 70*k_pu \ub85c \uacc4\uc0b0\ud55c\ub2e4. (\ucd5c\uc885 \uacb0\uacfc\ub294 PID \uac12 \ub2e4 \ub123\uace0 sustainable power \uae4c\uc9c0 \ud569\uc0b0\ud55c \uacb0\uacfc) k_d | current_temp | | v | +----------+ +---+ | +----->| diff_err |-->| X |------+ | | +----------+ +---+ | | | | tdp actor | | k_i | | get_requested_power() | | | | | | | | | | | | | | ... v | v v v v v +---+ | +-------+ +---+ +---+ +---+ +----------+ | S |-----+----->| sum e |----->| X |--->| S |-->| S |-->|power | +---+ | +-------+ +---+ +---+ +---+ |allocation| ^ | ^ +----------+ | | | | | | | +---+ | | | | +------->| X |-------------------+ v v | +---+ granted performance desired_temperature ^ | | k_po/k_pu https://www.kernel.org/doc/html/v5.7/driver-api/thermal/power_allocator.html v5.9.11 linux drivers/thermal/gov_power_allocator.c static int power_allocator_throttle(struct thermal_zone_device *tz, int trip) { int ret; int switch_on_temp, control_temp; struct power_allocator_params *params = tz->governor_data; /* * We get called for every trip point but we only need to do * our calculations once */ if (trip != params->trip_max_desired_temperature) return 0; ret = tz->ops->get_trip_temp(tz, params->trip_switch_on, &switch_on_temp); if (!ret && (tz->temperature < switch_on_temp)) { tz->passive = 0; reset_pid_controller(params); allow_maximum_power(tz); return 0; } tz->passive = 1; ret = tz->ops->get_trip_temp(tz, params->trip_max_desired_temperature, &control_temp); if (ret) { dev_warn(&tz->device, \"Failed to get the maximum desired temperature: %d\\n\", ret); return ret; } return allocate_power(tz, control_temp); } switch_on_temp \ub294 \ud574\ub2f9 governor \uac00 \ub3d9\uc791\ud558\uae30 \uc2dc\uc791\ud558\ub294 \uae30\uc900 \uc628\ub3c4\uc774\ub2e4. (\ud56d\uc0c1 \ub3d9\uc791\ud558\uba74 PID \uacc4\uc0b0\uc2dd\uc5d0 error \uac12\uc774 \uacc4\uc18d \ub204\uc801\ub418\uae30 \ub54c\ubb38\uc5d0 \uad49\uc7a5\ud788 \ub290\ub9ac\uac8c \uc6d0\ud558\ub294 \uc628\ub3c4\uc5d0 \ub3c4\ub2ec\ud558\uac8c \ub41c\ub2e4.) \ud639\uc740 governor\uac00 \ub3d9\uc791 \uc911\uc5d0 \ud574\ub2f9 \uae30\uc900 \uc628\ub3c4\ubcf4\ub2e4 \ub0ae\uc544\uc9c0\uba74 \ub3d9\uc791\uc744 \uba48\ucd94\ub294 \uac83\ubfd0\ub9cc \uc544\ub2c8\ub77c \uadf8\ub3d9\uc548 \uacc4\uc0b0\ud558\ub358 PID \uc2dd\ub3c4 reset \ud55c\ub2e4. ret = tz->ops->get_trip_temp(tz, params->trip_switch_on, &switch_on_temp); if (!ret && (tz->temperature < switch_on_temp)) { tz->passive = 0; reset_pid_controller(params); allow_maximum_power(tz); return 0; } \uae30\uc900 \uc628\ub3c4\ub97c \ub118\uc5b4\uc11c\uba74 \uc720\uc9c0\ud558\uace0 \uc2f6\uc740 \uc628\ub3c4 (desired temperature) \uc744 \ub9de\ucd9c \uc218 \uc788\ub3c4\ub85d power \ub97c \ud560\ub2f9\ud55c\ub2e4. ret = tz->ops->get_trip_temp(tz, params->trip_max_desired_temperature, &control_temp); if (ret) { dev_warn(&tz->device, \"Failed to get the maximum desired temperature: %d\\n\", ret); return ret; } return allocate_power(tz, control_temp); allocate_power \ud568\uc218\uc5d0\uc11c\ub294 \ud560\ub2f9 \uac00\ub2a5\ud55c power \ub97c \uacc4\uc0b0\ud55c\ub2e4. if (cdev->ops->get_requested_power(cdev, tz, &req_power[i])) continue; if (!total_weight) weight = 1 << FRAC_BITS; else weight = instance->weight; weighted_req_power[i] = frac_to_int(weight * req_power[i]); if (power_actor_get_max_power(cdev, tz, &max_power[i])) continue; total_req_power += req_power[i]; max_allocatable_power += max_power[i]; total_weighted_req_power += weighted_req_power[i]; i++; \uadf8\ub9ac\uace0 \uc774 \uacc4\uc0b0\ub41c power \uac12\uc744 \uc801\uc6a9\ud55c\ub2e4. list_for_each_entry(instance, &tz->thermal_instances, tz_node) { if (instance->trip != trip_max_desired_temperature) continue; if (!cdev_is_power_actor(instance->cdev)) continue; power_actor_set_power(instance->cdev, instance, granted_power[i]); total_granted_power += granted_power[i]; i++; } drivers/thermal/cpufreq_cooling.c for_each_cpu(cpu, policy->related_cpus) { u32 load; if (cpu_online(cpu)) load = get_load(cpufreq_cdev, cpu, i); else load = 0; total_load += load; if (load_cpu) load_cpu[i] = load; i++; } cpufreq_cdev->last_load = total_load; *power = get_dynamic_power(cpufreq_cdev, freq); static u32 get_dynamic_power(struct cpufreq_cooling_device *cpufreq_cdev, unsigned long freq) { u32 raw_cpu_power; raw_cpu_power = cpu_freq_to_power(cpufreq_cdev, freq); return (raw_cpu_power * cpufreq_cdev->last_load) / 100; } power \ub97c \uacc4\uc0b0\ud560 \ub54c\ub294 cpu load \ub97c \uace0\ub824\ud558\uc5ec \uacc4\uc0b0\ud55c\ub2e4. drivers/thermal/thermal_core.c int power_actor_set_power(struct thermal_cooling_device *cdev, struct thermal_instance *instance, u32 power) { unsigned long state; int ret; if (!cdev_is_power_actor(cdev)) return -EINVAL; ret = cdev->ops->power2state(cdev, instance->tz, power, &state); if (ret) return ret; instance->target = state; mutex_lock(&cdev->lock); cdev->updated = false; mutex_unlock(&cdev->lock); thermal_cdev_update(cdev); return 0; } \uadf8\ub9ac\uace0 power2state \ud568\uc218\ub97c \ud638\ucd9c\ud558\uc5ec power \ub97c \uc124\uc815\ud55c\ub2e4. drivers/thermal/cpufreq_cooling.c // cpufreq_power2state static int cpufreq_power2state(struct thermal_cooling_device *cdev, struct thermal_zone_device *tz, u32 power, unsigned long *state) { unsigned int target_freq; u32 last_load, normalised_power; struct cpufreq_cooling_device *cpufreq_cdev = cdev->devdata; struct cpufreq_policy *policy = cpufreq_cdev->policy; last_load = cpufreq_cdev->last_load ?: 1; normalised_power = (power * 100) / last_load; target_freq = cpu_power_to_freq(cpufreq_cdev, normalised_power); *state = get_level(cpufreq_cdev, target_freq); trace_thermal_power_cpu_limit(policy->related_cpus, target_freq, *state, power); return 0; } // cpu_power_to_freq static u32 cpu_power_to_freq(struct cpufreq_cooling_device *cpufreq_cdev, u32 power) { int i; for (i = cpufreq_cdev->max_level; i >= 0; i--) { if (power >= cpufreq_cdev->em->table[i].power) break; } return cpufreq_cdev->em->table[i].frequency; } sustainable_power \ub294 device tree \uc5d0 \ub2e4\uc74c\uacfc \uac19\uc774 sustainable-power \ub178\ub4dc\ub85c \uc120\uc5b8\ud55c\ub2e4. arch/arm64/boot/dts/mediatek/mt8173.dtsi thermal-zones { cpu_thermal: cpu_thermal { polling-delay-passive = <1000>; /* milliseconds */ polling-delay = <1000>; /* milliseconds */ thermal-sensors = <&thermal>; sustainable-power = <1500>; /* milliwatts */ trips { threshold: trip-point0 { temperature = <68000>; hysteresis = <2000>; type = \"passive\"; }; target: trip-point1 { temperature = <85000>; hysteresis = <2000>; type = \"passive\"; }; cpu_crit: cpu_crit0 { temperature = <115000>; hysteresis = <2000>; type = \"critical\"; }; }; smooth \ud558\uac8c \uc870\uc815\ud560 \uc218 \uc788\uace0, \uc6d0\ud558\ub294 \uc628\ub3c4\ub85c \ub3c4\ub2ec\ud560 \uc218 \uc788\ub2e4\ub294 \uc7a5\uc810\uc774 \uc788\ub2e4. sysfs \ud604\uc7ac \uc628\ub3c4 \ud655\uc778 $ cat /sys/class/thermal/thermal_zone0/temp Reference Linux kernel documentation - Thermal Thermal Framework https://www.linaro.org/blog/thermal-notifications-with-netlink/ https://www.cnblogs.com/hellokitty2/p/15600099.html https://blog.csdn.net/weixin_40237571/article/details/111953849 https://www.kernel.org/doc/html/v5.7/driver-api/thermal/cpu-idle-cooling.html DTPM - Dynamic Thermal Power Management","title":"Thermal"},{"location":"04_Thermal/04_01_thermal_framework/#thermal-framework","text":"","title":"Thermal Framework"},{"location":"04_Thermal/04_01_thermal_framework/#thermal-framework-overview","text":"https://www.cnblogs.com/arnoldlu/p/11207142.html","title":"Thermal Framework Overview"},{"location":"04_Thermal/04_01_thermal_framework/#throttling-and-tripping","text":"","title":"Throttling and Tripping"},{"location":"04_Thermal/04_01_thermal_framework/#governor","text":"gov_bang_bang gov_power_allocator gov_user_space gov_fair_share gov_step_wise Linaro Presentation: https://static.linaro.org/connect/san19/presentations/san19-101.pdf Power Allocator Governor PID \uc81c\uc5b4 \uc54c\uace0\ub9ac\uc998\uc744 \ud65c\uc6a9\ud558\uc5ec, \uc6d0\ud558\ub294 \uc628\ub3c4\uac00 \ub420 \ub54c\uae4c\uc9c0 \uc815\ud574\uc9c4 power budget (\ubc30\ud130\ub9ac \uc6a9\ub7c9) \ub0b4\uc5d0\uc11c power allocation \uc744 \uc870\uc815\ud558\ub294 \uac83\uc774\ub2e4. P_max = k_p * e + k_i * err_integral + k_d * diff_err + sustainable_power \ubaa9\ud45c\uce58\uac00 100\uc77c \ub54c, \ud604\uc7ac \uc628\ub3c4\uac00 110\ub3c4\ub77c\uba74 overshoot \uc0c1\ud0dc\uc774\uace0, P\ub97c -10*k_po \ub85c \uacc4\uc0b0\ud558\uace0, \ud604\uc7ac \uc628\ub3c4\uac00 30\ub3c4\ub77c\uba74 undershoot\ub85c 70*k_pu \ub85c \uacc4\uc0b0\ud55c\ub2e4. (\ucd5c\uc885 \uacb0\uacfc\ub294 PID \uac12 \ub2e4 \ub123\uace0 sustainable power \uae4c\uc9c0 \ud569\uc0b0\ud55c \uacb0\uacfc) k_d | current_temp | | v | +----------+ +---+ | +----->| diff_err |-->| X |------+ | | +----------+ +---+ | | | | tdp actor | | k_i | | get_requested_power() | | | | | | | | | | | | | | ... v | v v v v v +---+ | +-------+ +---+ +---+ +---+ +----------+ | S |-----+----->| sum e |----->| X |--->| S |-->| S |-->|power | +---+ | +-------+ +---+ +---+ +---+ |allocation| ^ | ^ +----------+ | | | | | | | +---+ | | | | +------->| X |-------------------+ v v | +---+ granted performance desired_temperature ^ | | k_po/k_pu https://www.kernel.org/doc/html/v5.7/driver-api/thermal/power_allocator.html v5.9.11 linux drivers/thermal/gov_power_allocator.c static int power_allocator_throttle(struct thermal_zone_device *tz, int trip) { int ret; int switch_on_temp, control_temp; struct power_allocator_params *params = tz->governor_data; /* * We get called for every trip point but we only need to do * our calculations once */ if (trip != params->trip_max_desired_temperature) return 0; ret = tz->ops->get_trip_temp(tz, params->trip_switch_on, &switch_on_temp); if (!ret && (tz->temperature < switch_on_temp)) { tz->passive = 0; reset_pid_controller(params); allow_maximum_power(tz); return 0; } tz->passive = 1; ret = tz->ops->get_trip_temp(tz, params->trip_max_desired_temperature, &control_temp); if (ret) { dev_warn(&tz->device, \"Failed to get the maximum desired temperature: %d\\n\", ret); return ret; } return allocate_power(tz, control_temp); } switch_on_temp \ub294 \ud574\ub2f9 governor \uac00 \ub3d9\uc791\ud558\uae30 \uc2dc\uc791\ud558\ub294 \uae30\uc900 \uc628\ub3c4\uc774\ub2e4. (\ud56d\uc0c1 \ub3d9\uc791\ud558\uba74 PID \uacc4\uc0b0\uc2dd\uc5d0 error \uac12\uc774 \uacc4\uc18d \ub204\uc801\ub418\uae30 \ub54c\ubb38\uc5d0 \uad49\uc7a5\ud788 \ub290\ub9ac\uac8c \uc6d0\ud558\ub294 \uc628\ub3c4\uc5d0 \ub3c4\ub2ec\ud558\uac8c \ub41c\ub2e4.) \ud639\uc740 governor\uac00 \ub3d9\uc791 \uc911\uc5d0 \ud574\ub2f9 \uae30\uc900 \uc628\ub3c4\ubcf4\ub2e4 \ub0ae\uc544\uc9c0\uba74 \ub3d9\uc791\uc744 \uba48\ucd94\ub294 \uac83\ubfd0\ub9cc \uc544\ub2c8\ub77c \uadf8\ub3d9\uc548 \uacc4\uc0b0\ud558\ub358 PID \uc2dd\ub3c4 reset \ud55c\ub2e4. ret = tz->ops->get_trip_temp(tz, params->trip_switch_on, &switch_on_temp); if (!ret && (tz->temperature < switch_on_temp)) { tz->passive = 0; reset_pid_controller(params); allow_maximum_power(tz); return 0; } \uae30\uc900 \uc628\ub3c4\ub97c \ub118\uc5b4\uc11c\uba74 \uc720\uc9c0\ud558\uace0 \uc2f6\uc740 \uc628\ub3c4 (desired temperature) \uc744 \ub9de\ucd9c \uc218 \uc788\ub3c4\ub85d power \ub97c \ud560\ub2f9\ud55c\ub2e4. ret = tz->ops->get_trip_temp(tz, params->trip_max_desired_temperature, &control_temp); if (ret) { dev_warn(&tz->device, \"Failed to get the maximum desired temperature: %d\\n\", ret); return ret; } return allocate_power(tz, control_temp); allocate_power \ud568\uc218\uc5d0\uc11c\ub294 \ud560\ub2f9 \uac00\ub2a5\ud55c power \ub97c \uacc4\uc0b0\ud55c\ub2e4. if (cdev->ops->get_requested_power(cdev, tz, &req_power[i])) continue; if (!total_weight) weight = 1 << FRAC_BITS; else weight = instance->weight; weighted_req_power[i] = frac_to_int(weight * req_power[i]); if (power_actor_get_max_power(cdev, tz, &max_power[i])) continue; total_req_power += req_power[i]; max_allocatable_power += max_power[i]; total_weighted_req_power += weighted_req_power[i]; i++; \uadf8\ub9ac\uace0 \uc774 \uacc4\uc0b0\ub41c power \uac12\uc744 \uc801\uc6a9\ud55c\ub2e4. list_for_each_entry(instance, &tz->thermal_instances, tz_node) { if (instance->trip != trip_max_desired_temperature) continue; if (!cdev_is_power_actor(instance->cdev)) continue; power_actor_set_power(instance->cdev, instance, granted_power[i]); total_granted_power += granted_power[i]; i++; } drivers/thermal/cpufreq_cooling.c for_each_cpu(cpu, policy->related_cpus) { u32 load; if (cpu_online(cpu)) load = get_load(cpufreq_cdev, cpu, i); else load = 0; total_load += load; if (load_cpu) load_cpu[i] = load; i++; } cpufreq_cdev->last_load = total_load; *power = get_dynamic_power(cpufreq_cdev, freq); static u32 get_dynamic_power(struct cpufreq_cooling_device *cpufreq_cdev, unsigned long freq) { u32 raw_cpu_power; raw_cpu_power = cpu_freq_to_power(cpufreq_cdev, freq); return (raw_cpu_power * cpufreq_cdev->last_load) / 100; } power \ub97c \uacc4\uc0b0\ud560 \ub54c\ub294 cpu load \ub97c \uace0\ub824\ud558\uc5ec \uacc4\uc0b0\ud55c\ub2e4. drivers/thermal/thermal_core.c int power_actor_set_power(struct thermal_cooling_device *cdev, struct thermal_instance *instance, u32 power) { unsigned long state; int ret; if (!cdev_is_power_actor(cdev)) return -EINVAL; ret = cdev->ops->power2state(cdev, instance->tz, power, &state); if (ret) return ret; instance->target = state; mutex_lock(&cdev->lock); cdev->updated = false; mutex_unlock(&cdev->lock); thermal_cdev_update(cdev); return 0; } \uadf8\ub9ac\uace0 power2state \ud568\uc218\ub97c \ud638\ucd9c\ud558\uc5ec power \ub97c \uc124\uc815\ud55c\ub2e4. drivers/thermal/cpufreq_cooling.c // cpufreq_power2state static int cpufreq_power2state(struct thermal_cooling_device *cdev, struct thermal_zone_device *tz, u32 power, unsigned long *state) { unsigned int target_freq; u32 last_load, normalised_power; struct cpufreq_cooling_device *cpufreq_cdev = cdev->devdata; struct cpufreq_policy *policy = cpufreq_cdev->policy; last_load = cpufreq_cdev->last_load ?: 1; normalised_power = (power * 100) / last_load; target_freq = cpu_power_to_freq(cpufreq_cdev, normalised_power); *state = get_level(cpufreq_cdev, target_freq); trace_thermal_power_cpu_limit(policy->related_cpus, target_freq, *state, power); return 0; } // cpu_power_to_freq static u32 cpu_power_to_freq(struct cpufreq_cooling_device *cpufreq_cdev, u32 power) { int i; for (i = cpufreq_cdev->max_level; i >= 0; i--) { if (power >= cpufreq_cdev->em->table[i].power) break; } return cpufreq_cdev->em->table[i].frequency; } sustainable_power \ub294 device tree \uc5d0 \ub2e4\uc74c\uacfc \uac19\uc774 sustainable-power \ub178\ub4dc\ub85c \uc120\uc5b8\ud55c\ub2e4. arch/arm64/boot/dts/mediatek/mt8173.dtsi thermal-zones { cpu_thermal: cpu_thermal { polling-delay-passive = <1000>; /* milliseconds */ polling-delay = <1000>; /* milliseconds */ thermal-sensors = <&thermal>; sustainable-power = <1500>; /* milliwatts */ trips { threshold: trip-point0 { temperature = <68000>; hysteresis = <2000>; type = \"passive\"; }; target: trip-point1 { temperature = <85000>; hysteresis = <2000>; type = \"passive\"; }; cpu_crit: cpu_crit0 { temperature = <115000>; hysteresis = <2000>; type = \"critical\"; }; }; smooth \ud558\uac8c \uc870\uc815\ud560 \uc218 \uc788\uace0, \uc6d0\ud558\ub294 \uc628\ub3c4\ub85c \ub3c4\ub2ec\ud560 \uc218 \uc788\ub2e4\ub294 \uc7a5\uc810\uc774 \uc788\ub2e4.","title":"Governor"},{"location":"04_Thermal/04_01_thermal_framework/#sysfs","text":"\ud604\uc7ac \uc628\ub3c4 \ud655\uc778 $ cat /sys/class/thermal/thermal_zone0/temp Reference Linux kernel documentation - Thermal Thermal Framework https://www.linaro.org/blog/thermal-notifications-with-netlink/ https://www.cnblogs.com/hellokitty2/p/15600099.html https://blog.csdn.net/weixin_40237571/article/details/111953849 https://www.kernel.org/doc/html/v5.7/driver-api/thermal/cpu-idle-cooling.html DTPM - Dynamic Thermal Power Management","title":"sysfs"},{"location":"05_Regulator/05_01_regulator_framework/","text":"Regulator Framework","title":"Regulator"},{"location":"05_Regulator/05_01_regulator_framework/#regulator-framework","text":"","title":"Regulator Framework"},{"location":"06_S2R/06_01_System_Sleep_States/","text":"System Sleep States Linux kernel\uc5d0\uc11c\ub294 4\uac00\uc9c0\uc758 system sleep states\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. sleep states\ub294 low power states\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. Suspend-to-Idle Standby Suspend-to-RAM Hibernation https://www.kernel.org/doc/html/v4.14/admin-guide/pm/sleep-states.html cf) Working-State Power Management\ub294 DVFS \ucc55\ud130\uc5d0 \ud574\ub2f9\ud569\ub2c8\ub2e4. 4\uac00\uc9c0 Sleep states\ub294 ACPI \uaddc\uaca9\uc5d0 \uae30\ubc18\ud569\ub2c8\ub2e4. ACPI (Advanced Configuration and Power Interface)\ub294 HP, \uc778\ud154, \ub9c8\uc774\ud06c\ub85c\uc18c\ud504\ud2b8, \ud53c\ub2c9\uc2a4, \ub3c4\uc2dc\ubc14\uac00 \uac1c\ubc1c\ud55c \uc624\ud508 \ud45c\uc900\uc785\ub2c8\ub2e4. \ud558\ub4dc\uc6e8\uc5b4 \uac10\uc9c0, \uba54\uc778\ubcf4\ub4dc \ubc0f \uc7a5\uce58 \uad6c\uc131, \uc804\uc6d0 \uad00\ub9ac\ub97c \ub2f4\ub2f9\ud558\ub294 \uc77c\ubc18\uc801\uc778 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc815\uc758\ud569\ub2c8\ub2e4. \uc774\ub7ec\ud55c \ub0b4\uc6a9\ub4e4 \uc911 \uc804\uc6d0 \uad00\ub9ac \uad00\uc810\uc5d0\uc11c\uc758 state \uad6c\ubd84\uc744 \ubcf4\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. ACPI \uacf5\uc2dd \ubb38\uc11c: https://uefi.org/sites/default/files/resources/ACPI_5_1release.pdf ACPI\ub294 BIOS\ub9cc \ud558\ub358 \uc804\uc6d0 \uad00\ub9ac\ub97c \uc6b4\uc601\uccb4\uc81c\ub3c4 \ud560 \uc218 \uc788\ub3c4\ub85d \ub9cc\ub4e4\uc5b4\uc9c4 \uc778\ud130\ud398\uc774\uc2a4\ub85c, \uc6b4\uc601\uccb4\uc81c\uac00 \ud544\uc694\uc5d0 \ub530\ub77c \uc804\ub825\uc744 \ud6a8\uc728\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\ub3c4\ub85d \ub3d5\uc2b5\ub2c8\ub2e4. Purpose of ACPI: designed to allow the operating system to control the amount of power provided to each device or peripheral attached to the computer system. [\ucc38\uace0] https://kb.iu.edu/d/ahvl S3 \uc5d0 \ud574\ub2f9\ud558\ub294 \uac83\uc774 Suspend To RAM\uc785\ub2c8\ub2e4. \ub7a8\uc758 \ub0b4\uc6a9\uc744 \ucd5c\ub300\ud55c \ubcf4\uc874\ud558\uace0 \ub098\uba38\uc9c0 \uc7a5\uce58 \ub300\ubd80\ubd84\uc758 \uc804\uc6d0\uc740 \ucc28\ub2e8\ud569\ub2c8\ub2e4. ACPI Sleeping States Linux Sleep States Description S1 Standby \ucef4\ud4e8\ud130\uac00 \ucf1c\uc9c4 \uc0c1\ud0dc\uc5d0\uc11c \ub514\uc2a4\ud06c\uc640 \ubaa8\ub2c8\ud130 \uc785\ucd9c\ub825 \uc7a5\uce58 \uc804\uc6d0 \ucc28\ub2e8 S2 - CPU \uc804\uc6d0 \ucc28\ub2e8, \ub7a8 \uac31\uc2e0 \uc815\uc0c1\uc801 S3 Suspend To RAM \ub7a8\uc758 \ub0b4\uc6a9\uc744 \ubcf4\uc874\ud558\uace0 \ub098\uba38\uc9c0 \uc7a5\uce58 \ub300\ubd80\ubd84 \uc804\uc6d0 \ucc28\ub2e8 S4 Suspend To Disk (Hibernation) \ub7a8\uc758 \ub0b4\uc6a9\uc744 \ud558\ub4dc\ub514\uc2a4\ud06c\uc5d0 \uc800\uc7a5\ud55c \ub4a4 \uc2dc\uc2a4\ud15c \uc804\uc6d0 \uc644\uc804 \ucc28\ub2e8 ACPI level \uc5d0 \ub300\uc751\ub418\ub294 Linux (v5.0) Sleep states Linux Kernel\uc5d0\uc11c\ub294 Suspend To RAM \uc744 \ud560 \uc218 \uc788\ub3c4\ub85d framework\uc5d0\uc11c \uc9c0\uc6d0\ud569\ub2c8\ub2e4. [\ucc38\uace0] http://events17.linuxfoundation.org/sites/events/files/slides/linux_suspend.pdf [\ucc38\uace0] http://www.wowotech.net/pm_subsystem/suspend_and_resume.html Reference ARM Open Source Software and Platforms - System Suspend To RAM What Is Suspend-to-Idle and How To Make It Work","title":"Supend To RAM"},{"location":"06_S2R/06_01_System_Sleep_States/#system-sleep-states","text":"Linux kernel\uc5d0\uc11c\ub294 4\uac00\uc9c0\uc758 system sleep states\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. sleep states\ub294 low power states\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. Suspend-to-Idle Standby Suspend-to-RAM Hibernation https://www.kernel.org/doc/html/v4.14/admin-guide/pm/sleep-states.html cf) Working-State Power Management\ub294 DVFS \ucc55\ud130\uc5d0 \ud574\ub2f9\ud569\ub2c8\ub2e4. 4\uac00\uc9c0 Sleep states\ub294 ACPI \uaddc\uaca9\uc5d0 \uae30\ubc18\ud569\ub2c8\ub2e4. ACPI (Advanced Configuration and Power Interface)\ub294 HP, \uc778\ud154, \ub9c8\uc774\ud06c\ub85c\uc18c\ud504\ud2b8, \ud53c\ub2c9\uc2a4, \ub3c4\uc2dc\ubc14\uac00 \uac1c\ubc1c\ud55c \uc624\ud508 \ud45c\uc900\uc785\ub2c8\ub2e4. \ud558\ub4dc\uc6e8\uc5b4 \uac10\uc9c0, \uba54\uc778\ubcf4\ub4dc \ubc0f \uc7a5\uce58 \uad6c\uc131, \uc804\uc6d0 \uad00\ub9ac\ub97c \ub2f4\ub2f9\ud558\ub294 \uc77c\ubc18\uc801\uc778 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc815\uc758\ud569\ub2c8\ub2e4. \uc774\ub7ec\ud55c \ub0b4\uc6a9\ub4e4 \uc911 \uc804\uc6d0 \uad00\ub9ac \uad00\uc810\uc5d0\uc11c\uc758 state \uad6c\ubd84\uc744 \ubcf4\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. ACPI \uacf5\uc2dd \ubb38\uc11c: https://uefi.org/sites/default/files/resources/ACPI_5_1release.pdf ACPI\ub294 BIOS\ub9cc \ud558\ub358 \uc804\uc6d0 \uad00\ub9ac\ub97c \uc6b4\uc601\uccb4\uc81c\ub3c4 \ud560 \uc218 \uc788\ub3c4\ub85d \ub9cc\ub4e4\uc5b4\uc9c4 \uc778\ud130\ud398\uc774\uc2a4\ub85c, \uc6b4\uc601\uccb4\uc81c\uac00 \ud544\uc694\uc5d0 \ub530\ub77c \uc804\ub825\uc744 \ud6a8\uc728\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\ub3c4\ub85d \ub3d5\uc2b5\ub2c8\ub2e4. Purpose of ACPI: designed to allow the operating system to control the amount of power provided to each device or peripheral attached to the computer system. [\ucc38\uace0] https://kb.iu.edu/d/ahvl S3 \uc5d0 \ud574\ub2f9\ud558\ub294 \uac83\uc774 Suspend To RAM\uc785\ub2c8\ub2e4. \ub7a8\uc758 \ub0b4\uc6a9\uc744 \ucd5c\ub300\ud55c \ubcf4\uc874\ud558\uace0 \ub098\uba38\uc9c0 \uc7a5\uce58 \ub300\ubd80\ubd84\uc758 \uc804\uc6d0\uc740 \ucc28\ub2e8\ud569\ub2c8\ub2e4. ACPI Sleeping States Linux Sleep States Description S1 Standby \ucef4\ud4e8\ud130\uac00 \ucf1c\uc9c4 \uc0c1\ud0dc\uc5d0\uc11c \ub514\uc2a4\ud06c\uc640 \ubaa8\ub2c8\ud130 \uc785\ucd9c\ub825 \uc7a5\uce58 \uc804\uc6d0 \ucc28\ub2e8 S2 - CPU \uc804\uc6d0 \ucc28\ub2e8, \ub7a8 \uac31\uc2e0 \uc815\uc0c1\uc801 S3 Suspend To RAM \ub7a8\uc758 \ub0b4\uc6a9\uc744 \ubcf4\uc874\ud558\uace0 \ub098\uba38\uc9c0 \uc7a5\uce58 \ub300\ubd80\ubd84 \uc804\uc6d0 \ucc28\ub2e8 S4 Suspend To Disk (Hibernation) \ub7a8\uc758 \ub0b4\uc6a9\uc744 \ud558\ub4dc\ub514\uc2a4\ud06c\uc5d0 \uc800\uc7a5\ud55c \ub4a4 \uc2dc\uc2a4\ud15c \uc804\uc6d0 \uc644\uc804 \ucc28\ub2e8 ACPI level \uc5d0 \ub300\uc751\ub418\ub294 Linux (v5.0) Sleep states Linux Kernel\uc5d0\uc11c\ub294 Suspend To RAM \uc744 \ud560 \uc218 \uc788\ub3c4\ub85d framework\uc5d0\uc11c \uc9c0\uc6d0\ud569\ub2c8\ub2e4. [\ucc38\uace0] http://events17.linuxfoundation.org/sites/events/files/slides/linux_suspend.pdf [\ucc38\uace0] http://www.wowotech.net/pm_subsystem/suspend_and_resume.html Reference ARM Open Source Software and Platforms - System Suspend To RAM What Is Suspend-to-Idle and How To Make It Work","title":"System Sleep States"}]}